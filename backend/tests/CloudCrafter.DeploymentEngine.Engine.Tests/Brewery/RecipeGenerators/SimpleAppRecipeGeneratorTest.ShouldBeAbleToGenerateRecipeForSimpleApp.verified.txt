name: My Custom Stack 123
application:
  id: 35223e08-9c9f-4322-972e-51c610c202e3
dockerComposeOptions:
  base64DockerCompose: c2VydmljZXM6CiAgbXktY3VzdG9tLXNlcnZpY2UtMTIzOgogICAgbGFiZWxzOgogICAgICBjbG91ZGNyYWZ0ZXIubWFuYWdlZDogdHJ1ZQogICAgICBjbG91ZGNyYWZ0ZXIuc3RhY2suaWQ6IDM1MjIzZTA4LTljOWYtNDMyMi05NzJlLTUxYzYxMGMyMDJlMwogICAgICBjbG91ZGNyYWZ0ZXIuc3RhY2suc2VydmljZS5pZDogYjM0YTY1NjAtNzAxZC00ZjBlLWIwMjQtYjRiN2IyMTU1YmNmCiAgICAgIGNsb3VkY3JhZnRlci5kZXBsb3ltZW50OiBmZGU4NWFhNi04ZGQ2LTQ4YzktOGM0Yi04MTcyYTJmMTVmMjgKICAgICAgdHJhZWZpay5lbmFibGU6IHRydWUKICAgICAgdHJhZWZpay5odHRwLnJvdXRlcnMuYjM0YTY1NjAtNzAxZC00ZjBlLWIwMjQtYjRiN2IyMTU1YmNmLnJ1bGU6IEhvc3QoYG15LWN1c3RvbS1kb21haW4uY29tYCkKICAgICAgdHJhZWZpay5odHRwLnJvdXRlcnMuYjM0YTY1NjAtNzAxZC00ZjBlLWIwMjQtYjRiN2IyMTU1YmNmLmVudHJ5cG9pbnRzOiB3ZWIKICAgICAgdHJhZWZpay5odHRwLnJvdXRlcnMuYjM0YTY1NjAtNzAxZC00ZjBlLWIwMjQtYjRiN2IyMTU1YmNmLnNlcnZpY2U6IGIzNGE2NTYwLTcwMWQtNGYwZS1iMDI0LWI0YjdiMjE1NWJjZgogICAgICB0cmFlZmlrLmh0dHAuc2VydmljZXMuYjM0YTY1NjAtNzAxZC00ZjBlLWIwMjQtYjRiN2IyMTU1YmNmLmxvYWRiYWxhbmNlci5zZXJ2ZXIucG9ydDogMzAwMAogICAgbmV0d29ya3M6CiAgICAtIGNsb3VkY3JhZnRlcgogICAgaW1hZ2U6IGIzNGE2NTYwLTcwMWQtNGYwZS1iMDI0LWI0YjdiMjE1NWJjZjpsYXRlc3QKbmV0d29ya3M6CiAgY2xvdWRjcmFmdGVyOgogICAgZXh0ZXJuYWw6IHRydWUK
  dockerComposeDirectory: /data/cloudcrafter/stacks/35223e08-9c9f-4322-972e-51c610c202e3
destination:
  rootDirectory: /data/cloudcrafter/stacks/35223e08-9c9f-4322-972e-51c610c202e3
environmentVariables:
  variables: {}
buildOptions:
  steps:
  - name: Check if network 'cloudcrafter' exists
    description: Validates if the network exists. If it does not, create the network regardless
    type: DockerValidateNetworksExists
    params:
      networks:
      - cloudcrafter
  - name: Fetch git repository
    description: Fetches the git repository
    type: FetchGitRepository
    params:
      repo: https://github.com/cloudcrafter-oss/demo-examples
      commit: HEAD
  - name: Determine Nixpacks buildpack
    description: Determines the Nixpacks buildpack to use for the application
    type: NixpacksDetermineBuildPack
    params:
      path: nixpacks-node-server
  - name: Generate Nixpacks plan
    description: Generates the Nixpacks plan for the application
    type: NixpacksGeneratePlan
    params:
      path: nixpacks-node-server
  - name: Alter Nixpacks build plan
    description: Alters the Nixpacks build plan for the application
    type: NixpacksAlterPlan
    params:
      packages:
      - iputils-ping
      - curl
  - name: Write Nixpacks plan to filesystem
    description: Writes the Nixpacks plan to the filesystem
    type: NixpacksWritePlanToFileSystem
    params:
      path: nixpacks-node-server
  - name: Build Docker image
    description: Builds the Docker image for the application
    type: NixpacksBuildDockerImage
    params:
      path: nixpacks-node-server
      image: b34a6560-701d-4f0e-b024-b4b7b2155bcf
      tag: latest
      disableCache: true
      env: {}
  - name: Write Docker Compose
    description: Writes the Docker Compose file to the filesystem
    type: DockerComposeWriteToFileSystem
    params:
      dockerComposeFile: docker-compose.yml
  - name: Docker Compose Up
    description: Runs docker compose up and stores the service names in a context, if enabled.
    type: DockerComposeUp
    params:
      dockerComposeFile: docker-compose.yml
      storeServiceNames: true
  - name: Container health check
    description: Checks the health of the containers
    type: ContainerHealthCheck
    params:
      dockerComposeSettings:
        fetchServicesFromContext: true
      services:
        my-custom-service-123:
          httpMethod: GET
          httpSchema: http
          httpHost: localhost
          httpPath: /
          httpPort: 3000
          expectedResponseCode: 200
          retries: 4
